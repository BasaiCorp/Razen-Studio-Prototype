{
  "Razen Web Document Type": {
    "prefix": "razen:web",
    "body": [
      "type web;",
      "",
      "# ${1:Razen Web Application}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# Initialize DOM elements when page loads",
      "fun initializeApp() {",
      "\tstr appContainer = document.getElementById(\"app\");",
      "\tappContainer.innerHTML = \"<h1>Welcome to Razen Web App</h1>\";",
      "",
      "\t# Add event listeners",
      "\tstr button = document.createElement(\"button\");",
      "\tbutton.textContent = \"Click Me\";",
      "\tbutton.addEventListener(\"click\", handleButtonClick);",
      "\tappContainer.appendChild(button);",
      "}",
      "",
      "# Event handler for button click",
      "fun handleButtonClick() {",
      "\tshow \"Button clicked!\";",
      "\tstr result = document.getElementById(\"result\");",
      "\tif (result) {",
      "\t\tresult.textContent = \"Button was clicked at \" + new Date().toLocaleTimeString();",
      "\t} else {",
      "\t\tvar resultElement = document.createElement(\"div\");",
      "\t\tresultElement.id = \"result\";",
      "\t\tresultElement.textContent = \"Button was clicked at \" + new Date().toLocaleTimeString();",
      "\t\tdocument.getElementById(\"app\").appendChild(resultElement);",
      "\t}",
      "}",
      "",
      "# Call the initialize function when the DOM is fully loaded",
      "document.addEventListener(\"DOMContentLoaded\", initializeApp);"
    ],
    "description": "Create a Razen web application (document type)"
  },
  "Razen CLI Document Type": {
    "prefix": "razen:cli",
    "body": [
      "type cli;",
      "",
      "# ${1:Razen CLI Application}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# Application version",
      "str VERSION = \"1.0.0\";",
      "",
      "# Display welcome message",
      "fun showWelcome() {",
      "\tshow \"===================================\";",
      "\tshow \"  ${1:Razen CLI Application} v\" + VERSION;",
      "\tshow \"===================================\";",
      "\tshow \"\";",
      "}",
      "",
      "# Display help menu",
      "fun showHelp() {",
      "\tshow \"Usage: razen app.rzn [command]\";",
      "\tshow \"\";",
      "\tshow \"Commands:\";",
      "\tshow \"  help     Display this help menu\";",
      "\tshow \"  version  Display application version\";",
      "\tshow \"  run      Run the main functionality\";",
      "\tshow \"\";",
      "}",
      "",
      "# Process command line arguments",
      "fun processArgs(args) {",
      "\tif (args.length == 0) {",
      "\t\tshowWelcome();",
      "\t\tshowHelp();",
      "\t\treturn;",
      "\t}",
      "",
      "\tvar command = args[0];",
      "\t",
      "\tif (command == \"help\") {",
      "\t\tshowHelp();",
      "\t} else if (command == \"version\") {",
      "\t\tshow VERSION;",
      "\t} else if (command == \"run\") {",
      "\t\trunMain();",
      "\t} else {",
      "\t\tshow \"Unknown command: \" + command;",
      "\t\tshowHelp();",
      "\t}",
      "}",
      "",
      "# Main application functionality",
      "fun runMain() {",
      "\tshowWelcome();",
      "\tshow \"Running main application...\";",
      "\t# Your application code here",
      "\t${2:// TODO: Implement main functionality}",
      "}",
      "",
      "# Start the application",
      "processArgs(process.argv.slice(2));"
    ],
    "description": "Create a Razen CLI application (document type)"
  },
  "Razen Script Document Type": {
    "prefix": "razen:script",
    "body": [
      "type script;",
      "",
      "# ${1:Razen Script}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# Variables",
      "num count = 0;",
      "str message = \"Hello, Razen!\";",
      "bool isActive = true;",
      "",
      "# Functions",
      "fun greet(name) {",
      "\treturn \"Hello, \" + name + \"!\";",
      "}",
      "",
      "fun increment(value, amount) {",
      "\treturn value + amount;",
      "}",
      "",
      "# Main script",
      "show message;",
      "",
      "var userName = \"User\";",
      "show greet(userName);",
      "",
      "count = increment(count, 5);",
      "show \"Count: \" + count;",
      "",
      "if (isActive) {",
      "\tshow \"Script is active!\";",
      "} else {",
      "\tshow \"Script is inactive.\";",
      "}"
    ],
    "description": "Create a Razen script (document type)"
  },
  "Razen Freestyle Document Type": {
    "prefix": "razen:freestyle",
    "body": [
      "type freestyle;",
      "",
      "# ${1:Razen Freestyle Program}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# This is a freestyle Razen program where you can mix different paradigms",
      "",
      "# Variables",
      "str name = \"Razen\";",
      "num age = 1;",
      "bool isAwesome = true;",
      "",
      "# Display a welcome message",
      "show \"Welcome to \" + name + \"!\";",
      "show name + \" is \" + age + \" year old.\";",
      "",
      "if (isAwesome) {",
      "\tshow name + \" is awesome!\";",
      "}",
      "",
      "# Get user input",
      "show \"What is your name?\";",
      "var userName;",
      "read userName;",
      "show \"Hello, \" + userName + \"!\";",
      "",
      "# Create a simple loop",
      "num counter = 0;",
      "while (counter < 5) {",
      "\tshow \"Counter: \" + counter;",
      "\tcounter = counter + 1;",
      "}",
      "",
      "show \"Program completed!\";"
    ],
    "description": "Create a Razen freestyle program (document type)"
  },
  "Razen API Feature": {
    "prefix": "razen:api",
    "body": [
      "type ${1|script,web|};",
      "",
      "# ${2:Razen API Server}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# Import required modules",
      "const express = require(\"express\");",
      "const cors = require(\"cors\");",
      "const bodyParser = require(\"body-parser\");",
      "",
      "# Initialize the Express app",
      "const app = express();",
      "const PORT = process.env.PORT || 3000;",
      "",
      "# Middleware",
      "app.use(cors());",
      "app.use(bodyParser.json());",
      "",
      "# Sample data",
      "str users = [",
      "\t{ id: 1, name: \"John Doe\", email: \"john@example.com\" },",
      "\t{ id: 2, name: \"Jane Smith\", email: \"jane@example.com\" }",
      "];",
      "",
      "# Routes",
      "# GET /api/users - Get all users",
      "app.get(\"/api/users\", (req, res) => {",
      "\tres.json(users);",
      "});",
      "",
      "# GET /api/users/:id - Get user by ID",
      "app.get(\"/api/users/:id\", (req, res) => {",
      "\tvar id = parseInt(req.params.id);",
      "\tvar user = users.find(u => u.id === id);",
      "\t",
      "\tif (user) {",
      "\t\tres.json(user);",
      "\t} else {",
      "\t\tres.status(404).json({ message: \"User not found\" });",
      "\t}",
      "});",
      "",
      "# POST /api/users - Create a new user",
      "app.post(\"/api/users\", (req, res) => {",
      "\tvar { name, email } = req.body;",
      "\t",
      "\tif (!name || !email) {",
      "\t\treturn res.status(400).json({ message: \"Name and email are required\" });",
      "\t}",
      "\t",
      "\tvar newUser = {",
      "\t\tid: users.length + 1,",
      "\t\tname,",
      "\t\temail",
      "\t};",
      "\t",
      "\tusers.push(newUser);",
      "\tres.status(201).json(newUser);",
      "});",
      "",
      "# PUT /api/users/:id - Update a user",
      "app.put(\"/api/users/:id\", (req, res) => {",
      "\tvar id = parseInt(req.params.id);",
      "\tvar { name, email } = req.body;",
      "\tvar userIndex = users.findIndex(u => u.id === id);",
      "\t",
      "\tif (userIndex === -1) {",
      "\t\treturn res.status(404).json({ message: \"User not found\" });",
      "\t}",
      "\t",
      "\tusers[userIndex] = { ...users[userIndex], name, email };",
      "\tres.json(users[userIndex]);",
      "});",
      "",
      "# DELETE /api/users/:id - Delete a user",
      "app.delete(\"/api/users/:id\", (req, res) => {",
      "\tvar id = parseInt(req.params.id);",
      "\tvar userIndex = users.findIndex(u => u.id === id);",
      "\t",
      "\tif (userIndex === -1) {",
      "\t\treturn res.status(404).json({ message: \"User not found\" });",
      "\t}",
      "\t",
      "\tusers.splice(userIndex, 1);",
      "\tres.status(204).send();",
      "});",
      "",
      "# Start the server",
      "app.listen(PORT, () => {",
      "\tshow \"API server running on port \" + PORT;",
      "});"
    ],
    "description": "Create a Razen API server (feature for script/web document types)"
  },
  "Razen Database Feature": {
    "prefix": "razen:database",
    "body": [
      "type ${1|script,web,cli,freestyle|};",
      "",
      "# ${2:Razen Database Integration}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# Import required modules",
      "const mysql = require(\"mysql2/promise\");",
      "",
      "# Database configuration",
      "str dbConfig = {",
      "\thost: \"localhost\",",
      "\tuser: \"root\",",
      "\tpassword: \"password\",",
      "\tdatabase: \"razen_db\"",
      "};",
      "",
      "# Create a connection pool",
      "str pool = mysql.createPool(dbConfig);",
      "",
      "# Function to get all users",
      "async fun getUsers() {",
      "\ttry {",
      "\t\tvar [rows] = await pool.query(\"SELECT * FROM users\");",
      "\t\treturn rows;",
      "\t} catch (error) {",
      "\t\tshow \"Error getting users: \" + error.message;",
      "\t\treturn [];",
      "\t}",
      "}",
      "",
      "# Function to get user by ID",
      "async fun getUserById(id) {",
      "\ttry {",
      "\t\tvar [rows] = await pool.query(\"SELECT * FROM users WHERE id = ?\", [id]);",
      "\t\treturn rows[0];",
      "\t} catch (error) {",
      "\t\tshow \"Error getting user: \" + error.message;",
      "\t\treturn null;",
      "\t}",
      "}",
      "",
      "# Function to create a new user",
      "async fun createUser(name, email) {",
      "\ttry {",
      "\t\tvar [result] = await pool.query(",
      "\t\t\t\"INSERT INTO users (name, email) VALUES (?, ?)\",",
      "\t\t\t[name, email]",
      "\t\t);",
      "\t\treturn { id: result.insertId, name, email };",
      "\t} catch (error) {",
      "\t\tshow \"Error creating user: \" + error.message;",
      "\t\treturn null;",
      "\t}",
      "}",
      "",
      "# Main function",
      "async fun main() {",
      "\tshow \"Database Integration Example\";",
      "\t",
      "\t# Create a new user",
      "\tvar newUser = await createUser(\"John Doe\", \"john@example.com\");",
      "\tshow \"Created user:\", newUser;",
      "\t",
      "\t# Get all users",
      "\tvar users = await getUsers();",
      "\tshow \"All users:\", users;",
      "}",
      "",
      "# Run the main function",
      "main().catch(error => {",
      "\tshow \"Error in main:\", error;",
      "});"
    ],
    "description": "Create a Razen database integration (feature for any document type)"
  },
  "Razen Component Feature": {
    "prefix": "razen:component",
    "body": [
      "type ${1|web,script|};",
      "",
      "# ${2:Razen Component}",
      "# Created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "",
      "# Component class",
      "class ${3:Component} {",
      "\t# Constructor",
      "\tconstructor(props) {",
      "\t\tthis.props = props || {};",
      "\t\tthis.state = {",
      "\t\t\tcount: 0,",
      "\t\t\tisActive: false",
      "\t\t};",
      "\t}",
      "",
      "\t# Method to update state",
      "\tsetState(newState) {",
      "\t\tthis.state = { ...this.state, ...newState };",
      "\t\tthis.render();",
      "\t}",
      "",
      "\t# Method to increment counter",
      "\tincrement() {",
      "\t\tthis.setState({ count: this.state.count + 1 });",
      "\t}",
      "",
      "\t# Method to toggle active state",
      "\ttoggleActive() {",
      "\t\tthis.setState({ isActive: !this.state.isActive });",
      "\t}",
      "",
      "\t# Render method",
      "\trender() {",
      "\t\tvar container = document.getElementById(this.props.containerId || \"app\");",
      "\t\tif (!container) return;",
      "",
      "\t\t# Clear container",
      "\t\tcontainer.innerHTML = \"\";",
      "",
      "\t\t# Create component elements",
      "\t\tvar componentEl = document.createElement(\"div\");",
      "\t\tcomponentEl.className = \"component \" + (this.state.isActive ? \"active\" : \"inactive\");",
      "",
      "\t\t# Create title",
      "\t\tvar title = document.createElement(\"h2\");",
      "\t\ttitle.textContent = this.props.title || \"Razen Component\";",
      "\t\tcomponentEl.appendChild(title);",
      "",
      "\t\t# Create counter display",
      "\t\tvar counter = document.createElement(\"p\");",
      "\t\tcounter.textContent = \"Count: \" + this.state.count;",
      "\t\tcomponentEl.appendChild(counter);",
      "",
      "\t\t# Create increment button",
      "\t\tvar incButton = document.createElement(\"button\");",
      "\t\tincButton.textContent = \"Increment\";",
      "\t\tincButton.onclick = () => this.increment();",
      "\t\tcomponentEl.appendChild(incButton);",
      "",
      "\t\t# Create toggle button",
      "\t\tvar toggleButton = document.createElement(\"button\");",
      "\t\ttoggleButton.textContent = this.state.isActive ? \"Deactivate\" : \"Activate\";",
      "\t\ttoggleButton.onclick = () => this.toggleActive();",
      "\t\tcomponentEl.appendChild(toggleButton);",
      "",
      "\t\t# Append component to container",
      "\t\tcontainer.appendChild(componentEl);",
      "\t}",
      "}",
      "",
      "# Export the component",
      "module.exports = ${3:Component};"
    ],
    "description": "Create a Razen component (feature for web/script document types)"
  },
  "Shorthand Variable Declaration": {
    "prefix": ["num.", "str.", "bool.", "var.", "const."],
    "body": [
      "${TM_CURRENT_WORD} ${1:variableName} = ${2:value};"
    ],
    "description": "Shorthand variable declaration"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code}",
      "}"
    ],
    "description": "If statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code}",
      "} else {",
      "\t${3:// code}",
      "}"
    ],
    "description": "If-Else statement"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (num ${1:i} = 0; ${1:i} < ${2:count}; ${1:i} = ${1:i} + 1) {",
      "\t${3:// code}",
      "}"
    ],
    "description": "For loop"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t${2:// code}",
      "}"
    ],
    "description": "While loop"
  },
  "Function Declaration": {
    "prefix": "fun",
    "body": [
      "fun ${1:functionName}(${2:parameters}) {",
      "\t${3:// code}",
      "}"
    ],
    "description": "Function declaration"
  },
  "Try-Catch Block": {
    "prefix": "try",
    "body": [
      "try {",
      "\t${1:// code that might throw an exception}",
      "} catch {",
      "\t${2:// code to handle the exception}",
      "}"
    ],
    "description": "Try-Catch block"
  }
}
